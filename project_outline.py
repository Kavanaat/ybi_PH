# -*- coding: utf-8 -*-
"""Project Outline.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/YBIFoundation/Fundamental/blob/main/Project_Outline.ipynb

# **Title of Project**

Handwritten Digit Prediction


A project to classify handwritten digits using machine learning techniques.

-------------

## **Objective**

The objective of this project is to build a machine learning model capable of recognizing handwritten digits (0-9) from image data, using the MNIST dataset.

The dataset used is the MNIST dataset, which is publicly available and can be loaded directly using TensorFlow/Keras.

## **Import Library**
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from tensorflow.keras.datasets import mnist
from tensorflow.keras import models, layers
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix

"""## **Import Data**"""

(X_train, y_train), (X_test, y_test) = mnist.load_data()
print(f"Training data shape: {X_train.shape}")
print(f"Testing data shape: {X_test.shape}")

"""## **Describe Data**"""

# Display a sample image
plt.imshow(X_train[0], cmap='gray')
plt.title(f"Label: {y_train[0]}")
plt.show()

# Check data statistics
print(f"Pixel range: {X_train.min()} to {X_train.max()}")
print(f"Number of unique labels: {len(np.unique(y_train))}")

"""## **Data Visualization**"""

# Plot multiple images
fig, axes = plt.subplots(1, 5, figsize=(10, 2))
for i, ax in enumerate(axes):
    ax.imshow(X_train[i], cmap='gray')
    ax.set_title(f"Label: {y_train[i]}")
    ax.axis('off')
plt.show()

"""## **Data Preprocessing**"""

# Normalize the data
X_train = X_train / 255.0
X_test = X_test / 255.0

# Reshape for CNN
X_train = X_train.reshape(-1, 28, 28, 1)
X_test = X_test.reshape(-1, 28, 28, 1)

# One-hot encode labels
from tensorflow.keras.utils import to_categorical
y_train = to_categorical(y_train, 10)
y_test = to_categorical(y_test, 10)

"""## **Define Target Variable (y) and Feature Variables (X)**"""

# X is already preprocessed images, and y is one-hot encoded labels.
print(f"Feature shape: {X_train.shape}, Target shape: {y_train.shape}")

"""## **Train Test Split**

The MNIST dataset already has predefined training and testing sets. No additional split is needed.
"""



"""## **Modeling**"""

model = models.Sequential([
    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Flatten(),
    layers.Dense(128, activation='relu'),
    layers.Dense(10, activation='softmax')
])

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
model.summary()

"""## **Model Evaluation**"""

history = model.fit(X_train, y_train, epochs=5, batch_size=64, validation_split=0.2)

# Evaluate the model
loss, accuracy = model.evaluate(X_test, y_test)
print(f"Test Loss: {loss}, Test Accuracy: {accuracy}")

"""# Prediction"""

# Predict on a test image
pred = model.predict(X_test[0].reshape(1, 28, 28, 1))
predicted_label = np.argmax(pred)
actual_label = np.argmax(y_test[0])

print(f"Predicted Label: {predicted_label}, Actual Label: {actual_label}")

# Display the image
plt.imshow(X_test[0].reshape(28, 28), cmap='gray')
plt.title(f"Prediction: {predicted_label}")
plt.show()

"""## **Explaination**

The Convolutional Neural Network (CNN) achieves high accuracy by identifying spatial hierarchies in images. It uses convolutional layers to extract features, pooling layers to reduce dimensionality, and fully connected layers to predict the digit. The model is trained to minimize categorical cross-entropy loss.
"""